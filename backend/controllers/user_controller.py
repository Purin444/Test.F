import time
from zk import ZK
from extensions import mongo
import os
import platform

# ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ IP ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco
DEVICE_IPS = ['192.168.1.220']

ping_status = {}  # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Ping

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå ZKTeco ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°
def is_device_reachable(ip):
    if ip in ping_status:
        return ping_status[ip]  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢ Ping ‡πÅ‡∏•‡πâ‡∏ß
    param = "-n 1" if platform.system().lower() == "windows" else "-c 1"
    response = os.system(f"ping {param} {ip} > nul 2>&1")
    ping_status[ip] = response == 0  # ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ Ping ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡πâ‡∏≥
    return ping_status[ip]

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ZKTeco
def connect_zk(ip):
    if not is_device_reachable(ip):  # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ Ping ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        print(f"‚ùå Skipping {ip} due to ping failure. (connect_zk)")
        return None
    zk = ZK(ip, port=4370, timeout=1)  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Timeout ‡πÉ‡∏´‡πâ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î (1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    try:
        conn = zk.connect()
        conn.disable_device()
        print(f"‚úÖ Connected to ZKTeco at {ip}")
        return conn
    except Exception as e:
        print(f"‚ö†Ô∏è Error connecting to ZK device at {ip}: {e}")
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å ZKTeco
def fetch_users():
    all_users = []
    zk_connection_failed = True  # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ

    for ip in DEVICE_IPS:
        if not is_device_reachable(ip):  # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ Ping ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            print(f"‚ùå Skipping {ip} due to ping failure. (fetch_users)")
            continue  # ‚úÖ ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡πÄ‡∏•‡∏¢ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏ß‡∏•‡∏≤‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠

        conn = connect_zk(ip)
        if conn:
            zk_connection_failed = False  # ‡∏ñ‡πâ‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô False
            try:
                users = conn.get_users()
                if users:
                    print(f"‚úÖ Fetched {len(users)} users from {ip}.")
                    for user in users:
                        all_users.append({
                            'user_id': user.user_id,
                            'name': user.name or "Unnamed",
                            'device_ip': ip
                        })
                else:
                    print(f"‚ö†Ô∏è No users found on {ip}.")
            except Exception as e:
                print(f"‚ö†Ô∏è Error fetching users from {ip}: {e}")
            finally:
                conn.enable_device()
                conn.disconnect()
                print(f"üîå Disconnected from {ip}.")
        else:
            print(f"‚ö†Ô∏è Skipping {ip} due to connection issues.")

    try:
        users_collection = mongo.db.users
        if all_users:
            for user in all_users:
                users_collection.update_one(
                    {"user_id": user["user_id"]}, 
                    {"$set": user}, 
                    upsert=True
                )
            print(f"‚úÖ Updated {len(all_users)} users in MongoDB.")

        # ‡∏ñ‡πâ‡∏≤ ZKTeco ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if zk_connection_failed:
            print("‚ö†Ô∏è Using data from MongoDB due to ZKTeco connection issues.")
            users_from_db = users_collection.find()
            return [
                {
                    "_id": str(user["_id"]),
                    "user_id": user["user_id"],
                    "name": user["name"],
                    "device_ip": user.get("device_ip")
                }
                for user in users_from_db
            ], 200

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å MongoDB
        users_from_db = users_collection.find()
        response_data = [
            {
                "_id": str(user["_id"]),
                "user_id": user["user_id"],
                "name": user["name"],
                "device_ip": user.get("device_ip")
            }
            for user in users_from_db
        ]

        print("‚úÖ Users successfully fetched and serialized.")
        return response_data, 200

    except Exception as e:
        print(f"‚ùå Error updating MongoDB: {e}")
        return {"error": str(e)}, 500

